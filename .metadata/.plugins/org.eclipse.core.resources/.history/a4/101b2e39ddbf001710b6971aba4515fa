package br.edu.ifcvideira.controllers.views;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.EventQueue;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.RowFilter;
import javax.swing.SwingConstants;
import javax.swing.border.EmptyBorder;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

import br.edu.ifcvideira.DAOs.ClienteDao;
import br.edu.ifcvideira.DAOs.OrcamentoDao;
import br.edu.ifcvideira.beans.Cliente;

public class OrcamentoView extends JFrame {

	private static final long serialVersionUID = 1L;
	public static  List<Object> gastos = new ArrayList<Object>();
	private JPanel contentPane;
	private JTextField textPNome;
	private JTextField textPCodigo;
	private JTable table;

	
	OrcamentoDao oDao = new OrcamentoDao();
	
	java.sql.Timestamp time = new java.sql.Timestamp(System.currentTimeMillis());
	
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					ProcurarClienteView frame = new ProcurarClienteView();
					frame.setVisible(true);
				} catch (Exception e) {
					JOptionPane.showMessageDialog(null, e.getMessage());
				}
			}
		});
	}

	public OrcamentoView() {
		addWindowListener(new WindowAdapter() {
			public void windowOpened(WindowEvent arg0) {
				atualizarTabela();
		
			}
		});
		
		
		setTitle("Pesquisa Clientes");
		setResizable(false);
		setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		setBounds(100, 100, 435, 375);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JLabel label_5 = new JLabel("Busca:");
		label_5.setHorizontalAlignment(SwingConstants.RIGHT);
		label_5.setBounds(170, 11, 46, 20);
		contentPane.add(label_5);
		
		JLabel label_8 = new JLabel("Clientes Cadastrados:");
		label_8.setBounds(10, 111, 156, 20);
		contentPane.add(label_8);
		
		JScrollPane scrollPane = new JScrollPane();
		scrollPane.setBounds(10, 142, 415, 159);
		contentPane.add(scrollPane);
		
		table = new JTable();
		scrollPane.setViewportView(table);
		table.setModel(new DefaultTableModel(
			new Object[][] {
			},
			new String[] {
				"C\u00F3digo", "Nome", "CPF", "Telefone", "Celular", "Data"
			}
		));
		table.getColumnModel().getColumn(0).setPreferredWidth(59);
		table.getColumnModel().getColumn(5).setPreferredWidth(90);
		
		JSeparator separator_1 = new JSeparator();
		separator_1.setForeground(Color.LIGHT_GRAY);
		separator_1.setBounds(23, 11, 384, 2);
		contentPane.add(separator_1);
		
		JLabel label_6 = new JLabel("C\u00F3digo:");
		label_6.setBounds(23, 32, 46, 20);
		contentPane.add(label_6);
		label_6.setHorizontalAlignment(SwingConstants.RIGHT);
		
		textPCodigo = new JTextField();
		textPCodigo.setBounds(79, 32, 315, 20);
		contentPane.add(textPCodigo);
		textPCodigo.addCaretListener(new CaretListener() {
			public void caretUpdate(CaretEvent e) {
				
				//atualizar a tabela apenas com valores correspondentes aos digitados no campo de busca por codigo
				TableRowSorter<TableModel> filtro = null;  
				DefaultTableModel model = (DefaultTableModel) table.getModel();  
				filtro = new TableRowSorter<TableModel>(model);  
				table.setRowSorter(filtro);
				
				if (textPCodigo.getText().length() == 0) {
					filtro.setRowFilter(null);
				} else {  
					filtro.setRowFilter(RowFilter.regexFilter(textPCodigo.getText(), 0));  
				}  
			}
		});
		textPCodigo.setColumns(10);
		
		textPNome = new JTextField();
		textPNome.setBounds(79, 63, 315, 20);
		contentPane.add(textPNome);
		textPNome.addCaretListener(new CaretListener() {
			public void caretUpdate(CaretEvent arg0) {
				
				//atualizar a tabela apenas com valores correspondentes aos digitados no campo de busca por nome
				TableRowSorter<TableModel> filtro = null;  
				DefaultTableModel model = (DefaultTableModel) table.getModel();  
				filtro = new TableRowSorter<TableModel>(model);  
				table.setRowSorter(filtro); 
				
				if (textPNome.getText().length() == 0) {
					filtro.setRowFilter(null);
				} else {  
					filtro.setRowFilter(RowFilter.regexFilter("(?i)" + textPNome.getText(), 1));  
				}  
				
			}
		});
		textPNome.setColumns(10);
		
		JLabel label_7 = new JLabel("Nome:");
		label_7.setBounds(23, 63, 46, 20);
		contentPane.add(label_7);
		label_7.setHorizontalAlignment(SwingConstants.RIGHT);
		
		JSeparator separator = new JSeparator();
		separator.setForeground(Color.LIGHT_GRAY);
		separator.setBounds(10, 94, 384, 2);
		contentPane.add(separator);
		
		JButton sair = new JButton("Sair");
		sair.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				
				dispose();
			}
		});
		sair.setBackground(SystemColor.controlHighlight);
		sair.setBounds(10, 323, 112, 20);
		contentPane.add(sair);
		
		JButton Selecionar = new JButton("Selecionar");
		Selecionar.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				if (table.getSelectedRow() != -1){

					Cliente.setIdCliente(Integer.parseInt((String) table.getValueAt(table.getSelectedRow(), 0)));	
					Cliente.setNomeCliente(((String) table.getValueAt(table.getSelectedRow(), 1)));	
					
					VendasView.textFieldIdCliente.setText(""+Cliente.getIdCliente());
					VendasView.textFieldNomeCliente.setText(""+Cliente.getNomeCliente());
					dispose();
				
			}
				
			}
		});
		Selecionar.setBounds(158, 323, 112, 20);
		contentPane.add(Selecionar);
		
		JButton button = new JButton("Cadastrar Novo");
		button.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {				
				ClienteView frame = new ClienteView();
				frame.setVisible(true);
			}
		});
		button.setBackground(SystemColor.controlHighlight);
		button.setBounds(307, 322, 118, 20);
		contentPane.add(button);
	}

	

	public void atualizarTabela() {
		try {
			DefaultTableModel model = (DefaultTableModel) table.getModel();
			model.setNumRows(0);
		for (int x=0; x!=gastos.size(); x++)
			{
				model.addRow((Object[]) gastos.get(x));
			}
		} catch (Exception e) {
			JOptionPane.showMessageDialog(null, e.getMessage());
		}
	}
}
